// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: buku.sql

package sqlc

import (
	"context"
)

const createBuku = `-- name: CreateBuku :one
INSERT INTO buku (judul, penulis, kuantitas, tempat_penyimpanan)
VALUES ($1, $2, $3, $4)
RETURNING id, judul, penulis, kuantitas, tempat_penyimpanan
`

type CreateBukuParams struct {
	Judul             string `json:"judul"`
	Penulis           string `json:"penulis"`
	Kuantitas         int32  `json:"kuantitas"`
	TempatPenyimpanan string `json:"tempat_penyimpanan"`
}

func (q *Queries) CreateBuku(ctx context.Context, arg CreateBukuParams) (Buku, error) {
	row := q.db.QueryRow(ctx, createBuku,
		arg.Judul,
		arg.Penulis,
		arg.Kuantitas,
		arg.TempatPenyimpanan,
	)
	var i Buku
	err := row.Scan(
		&i.ID,
		&i.Judul,
		&i.Penulis,
		&i.Kuantitas,
		&i.TempatPenyimpanan,
	)
	return i, err
}

const deleteBuku = `-- name: DeleteBuku :exec
DELETE FROM buku
WHERE id = $1
`

func (q *Queries) DeleteBuku(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBuku, id)
	return err
}

const listBuku = `-- name: ListBuku :many
SELECT id, judul, penulis, kuantitas, tempat_penyimpanan FROM buku
`

func (q *Queries) ListBuku(ctx context.Context) ([]Buku, error) {
	rows, err := q.db.Query(ctx, listBuku)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Buku{}
	for rows.Next() {
		var i Buku
		if err := rows.Scan(
			&i.ID,
			&i.Judul,
			&i.Penulis,
			&i.Kuantitas,
			&i.TempatPenyimpanan,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBuku = `-- name: UpdateBuku :one
UPDATE buku
SET judul = $2, penulis = $3, kuantitas = $4, tempat_penyimpanan = $5
WHERE id = $1
RETURNING id, judul, penulis, kuantitas, tempat_penyimpanan
`

type UpdateBukuParams struct {
	ID                int64  `json:"id"`
	Judul             string `json:"judul"`
	Penulis           string `json:"penulis"`
	Kuantitas         int32  `json:"kuantitas"`
	TempatPenyimpanan string `json:"tempat_penyimpanan"`
}

func (q *Queries) UpdateBuku(ctx context.Context, arg UpdateBukuParams) (Buku, error) {
	row := q.db.QueryRow(ctx, updateBuku,
		arg.ID,
		arg.Judul,
		arg.Penulis,
		arg.Kuantitas,
		arg.TempatPenyimpanan,
	)
	var i Buku
	err := row.Scan(
		&i.ID,
		&i.Judul,
		&i.Penulis,
		&i.Kuantitas,
		&i.TempatPenyimpanan,
	)
	return i, err
}
