// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: mahasiswa.sql

package sqlc

import (
	"context"
)

const createMahasiswa = `-- name: CreateMahasiswa :one
INSERT INTO mahasiswa (nama, nim, jurusan)
VALUES ($1, $2, $3)
RETURNING id, nama, nim, jurusan
`

type CreateMahasiswaParams struct {
	Nama    string `json:"nama"`
	Nim     string `json:"nim"`
	Jurusan string `json:"jurusan"`
}

func (q *Queries) CreateMahasiswa(ctx context.Context, arg CreateMahasiswaParams) (Mahasiswa, error) {
	row := q.db.QueryRow(ctx, createMahasiswa, arg.Nama, arg.Nim, arg.Jurusan)
	var i Mahasiswa
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Nim,
		&i.Jurusan,
	)
	return i, err
}

const deleteMahasiswa = `-- name: DeleteMahasiswa :exec
DELETE FROM mahasiswa
WHERE id = $1
`

func (q *Queries) DeleteMahasiswa(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMahasiswa, id)
	return err
}

const listMahasiswa = `-- name: ListMahasiswa :many
SELECT id, nama, nim, jurusan FROM mahasiswa
`

func (q *Queries) ListMahasiswa(ctx context.Context) ([]Mahasiswa, error) {
	rows, err := q.db.Query(ctx, listMahasiswa)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Mahasiswa{}
	for rows.Next() {
		var i Mahasiswa
		if err := rows.Scan(
			&i.ID,
			&i.Nama,
			&i.Nim,
			&i.Jurusan,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMahasiswa = `-- name: UpdateMahasiswa :one
UPDATE mahasiswa
SET nama = $2, nim = $3, jurusan = $4
WHERE id = $1
RETURNING id, nama, nim, jurusan
`

type UpdateMahasiswaParams struct {
	ID      int64  `json:"id"`
	Nama    string `json:"nama"`
	Nim     string `json:"nim"`
	Jurusan string `json:"jurusan"`
}

func (q *Queries) UpdateMahasiswa(ctx context.Context, arg UpdateMahasiswaParams) (Mahasiswa, error) {
	row := q.db.QueryRow(ctx, updateMahasiswa,
		arg.ID,
		arg.Nama,
		arg.Nim,
		arg.Jurusan,
	)
	var i Mahasiswa
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Nim,
		&i.Jurusan,
	)
	return i, err
}
