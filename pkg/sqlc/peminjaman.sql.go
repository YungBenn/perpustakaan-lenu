// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: peminjaman.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPeminjaman = `-- name: CreatePeminjaman :one
INSERT INTO peminjaman (mahasiswa_id, buku_id, tanggal_peminjaman, tanggal_batas_pengembalian, tanggal_pengembalian)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, mahasiswa_id, buku_id, tanggal_peminjaman, tanggal_batas_pengembalian, tanggal_pengembalian
`

type CreatePeminjamanParams struct {
	MahasiswaID              pgtype.Int8 `json:"mahasiswa_id"`
	BukuID                   pgtype.Int8 `json:"buku_id"`
	TanggalPeminjaman        pgtype.Date `json:"tanggal_peminjaman"`
	TanggalBatasPengembalian pgtype.Date `json:"tanggal_batas_pengembalian"`
	TanggalPengembalian      pgtype.Date `json:"tanggal_pengembalian"`
}

func (q *Queries) CreatePeminjaman(ctx context.Context, arg CreatePeminjamanParams) (Peminjaman, error) {
	row := q.db.QueryRow(ctx, createPeminjaman,
		arg.MahasiswaID,
		arg.BukuID,
		arg.TanggalPeminjaman,
		arg.TanggalBatasPengembalian,
		arg.TanggalPengembalian,
	)
	var i Peminjaman
	err := row.Scan(
		&i.ID,
		&i.MahasiswaID,
		&i.BukuID,
		&i.TanggalPeminjaman,
		&i.TanggalBatasPengembalian,
		&i.TanggalPengembalian,
	)
	return i, err
}

const deletePeminjaman = `-- name: DeletePeminjaman :exec
DELETE FROM peminjaman
WHERE id = $1
`

func (q *Queries) DeletePeminjaman(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePeminjaman, id)
	return err
}

const listPeminjaman = `-- name: ListPeminjaman :many
SELECT id, mahasiswa_id, buku_id, tanggal_peminjaman, tanggal_batas_pengembalian, tanggal_pengembalian FROM peminjaman
`

func (q *Queries) ListPeminjaman(ctx context.Context) ([]Peminjaman, error) {
	rows, err := q.db.Query(ctx, listPeminjaman)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Peminjaman{}
	for rows.Next() {
		var i Peminjaman
		if err := rows.Scan(
			&i.ID,
			&i.MahasiswaID,
			&i.BukuID,
			&i.TanggalPeminjaman,
			&i.TanggalBatasPengembalian,
			&i.TanggalPengembalian,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePeminjaman = `-- name: UpdatePeminjaman :one
UPDATE peminjaman
SET mahasiswa_id = $2, buku_id = $3, tanggal_peminjaman = $4, tanggal_batas_pengembalian = $5, tanggal_pengembalian = $6
WHERE id = $1
RETURNING id, mahasiswa_id, buku_id, tanggal_peminjaman, tanggal_batas_pengembalian, tanggal_pengembalian
`

type UpdatePeminjamanParams struct {
	ID                       int64       `json:"id"`
	MahasiswaID              pgtype.Int8 `json:"mahasiswa_id"`
	BukuID                   pgtype.Int8 `json:"buku_id"`
	TanggalPeminjaman        pgtype.Date `json:"tanggal_peminjaman"`
	TanggalBatasPengembalian pgtype.Date `json:"tanggal_batas_pengembalian"`
	TanggalPengembalian      pgtype.Date `json:"tanggal_pengembalian"`
}

func (q *Queries) UpdatePeminjaman(ctx context.Context, arg UpdatePeminjamanParams) (Peminjaman, error) {
	row := q.db.QueryRow(ctx, updatePeminjaman,
		arg.ID,
		arg.MahasiswaID,
		arg.BukuID,
		arg.TanggalPeminjaman,
		arg.TanggalBatasPengembalian,
		arg.TanggalPengembalian,
	)
	var i Peminjaman
	err := row.Scan(
		&i.ID,
		&i.MahasiswaID,
		&i.BukuID,
		&i.TanggalPeminjaman,
		&i.TanggalBatasPengembalian,
		&i.TanggalPengembalian,
	)
	return i, err
}
